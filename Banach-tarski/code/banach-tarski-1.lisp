
(include-book "banach-tarski")

(defun set-b10 (p)
  (and (b3-0-set-a1 p)
       (b3-f p)))

(defun set-b20 (p)
  (and (b3-0-set-a2 p)
       (b3-f p)))

(defthmd b3-0-n-b3-f=>1-14
  (implies (b3-0-n-b3-f p)
           (or (b3-00 p)
               (b3-01 p)
               (b4-00 p)
               (b4-01 p)
               (b5-00 p)
               (b5-01 p)
               (b6-00 p)
               (b6-01 p)
               (b7-00 p)
               (b7-01 p)
               (b8-00 p)
               (b8-01 p)
               (b9-00 p)
               (b9-01 p)
               (b10-00 p)
               (b10-01 p)
               (b11-00 p)
               (b11-01 p)
               (b12-00 p)
               (b12-01 p)
               (b13-00 p)
               (b13-01 p)
               (b14-00 p)
               (b14-01 p)
               (set-b20 p)
               (set-b10 p)))
  :hints (("goal"
           :cases ((b3-0-set-a3 p)
                   (b3-0-set-a4 p)
                   (b3-0-set-a5 p)
                   (b3-0-set-a6 p)
                   (b3-0-set-a7 p)
                   (b3-0-set-a8 p)
                   (b3-0-set-a9 p)
                   (b3-0-set-a10 p)
                   (b3-0-set-a11 p)
                   (b3-0-set-a12 p)
                   (b3-0-set-a13 p)
                   (b3-0-set-a14 p)
                   (b3-0-set-a2 p)
                   (b3-0-set-a1 p))
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b3-0-iff-a1-to-a14 (p p))
                 )
           :in-theory nil
           )
          ("Subgoal 14"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b3-00 (p p))
                 (:instance b3-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-3)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-3)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-3)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-3))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-3))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-3))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-3))) (point p))
                 (:instance rot-3-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-3))
                                                                               P)))
                 (:instance rot-3-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-3))
                                                                               P)))
                 )
           :in-theory nil
           )
          ("Subgoal 13"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b4-00 (p p))
                 (:instance b4-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-4)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-4)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-4)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot
                            (m1 (a-inv-rotation (acl2-sqrt 2)))
                            (m2 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                             0 (* 2 (ACL2-PI)))
                                        (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-4))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-4))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-4))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-4))) (point p))
                 (:instance rot-4-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-4))
                                                                               P)))
                 (:instance rot-4-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-4))
                                                                               P)))
                 )
           :in-theory nil
           )
          ("Subgoal 12"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b5-00 (p p))
                 (:instance b5-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-5)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-5)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-5)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot
                            (m2 (a-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-5))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-5))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-5))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-5))) (point p))
                 (:instance rot-5-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-5))
                                                                               P)))
                 (:instance rot-5-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-5))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 11"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b6-00 (p p))
                 (:instance b6-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-6)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-6)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-6)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance b3-0-r-1-a-inv-r-b3-0-a6-iff-b3-0-r-1-a-1-r-a6-1
                            (m2 (a-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D)))
                            (m3 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-6))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-6))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-6))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-6))) (point p))
                 (:instance rot-6-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-6))
                                                                               P)))
                 (:instance rot-6-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-6))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 10"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b7-00 (p p))
                 (:instance b7-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-7)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-7)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-7)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-7))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-7))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-7))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-7))) (point p))
                 (:instance rot-7-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-7))
                                                                               P)))
                 (:instance rot-7-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-7))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 9"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b8-00 (p p))
                 (:instance b8-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-8)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-8)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-8)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-8))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-8))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-8))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-8))) (point p))
                 (:instance rot-8-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-8))
                                                                               P)))
                 (:instance rot-8-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-8))
                                                                                 P)))
                 )
           :in-theory nil
           )

          ("Subgoal 8"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b9-00 (p p))
                 (:instance b9-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-9)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-9)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-9)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-9))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-9))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-9))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-9))) (point p))
                 (:instance rot-9-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-9))
                                                                               P)))
                 (:instance rot-9-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-9))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 7"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b10-00 (p p))
                 (:instance b10-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-10)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-10)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-10)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot
                            (m1 (b-inv-rotation (acl2-sqrt 2)))
                            (m2 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-10))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-10))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-10))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-10))) (point p))
                 (:instance rot-10-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-10))
                                                                               P)))
                 (:instance rot-10-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-10))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 6"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b11-00 (p p))
                 (:instance b11-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-11)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-11)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-11)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot
                            (m2 (b-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-11))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-11))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-11))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-11))) (point p))
                 (:instance rot-11-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-11))
                                                                               P)))
                 (:instance rot-11-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-11))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 5"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b12-00 (p p))
                 (:instance b12-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-12)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-12)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-12)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance b3-0-r-1-a-inv-r-b3-0-a6-iff-b3-0-r-1-a-1-r-a6-1
                            (m2 (b-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D)))
                            (m3 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-12))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-12))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-12))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-12))) (point p))
                 (:instance rot-12-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-12))
                                                                               P)))
                 (:instance rot-12-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-12))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 4"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b13-00 (p p))
                 (:instance b13-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-13)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-13)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-13)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-13))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-13))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-13))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-13))) (point p))
                 (:instance rot-13-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-13))
                                                                               P)))
                 (:instance rot-13-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-13))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 3"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b14-00 (p p))
                 (:instance b14-01 (p p))
                 (:instance b3-f (p p))
                 (:instance rot-14)
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (rot (r3-m-inverse (rot-14)))
                            (p p))
                 (:instance rot-m=>rot-m-inv
                            (m (rot-14)))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance ROT*SET-F (rot (r3-m-inverse (rot-14))) (p p))
                 (:instance ROT*SET-F-1 (rot (r3-m-inverse (rot-14))) (point p))
                 (:instance ROT*b3-F (rot (r3-m-inverse (rot-14))) (p p))
                 (:instance ROT*b3-F-1 (rot (r3-m-inverse (rot-14))) (point p))
                 (:instance rot-14-inv*f-suff (point p) (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-14))
                                                                               P)))
                 (:instance rot-14-inv*b3-f-suff (point p) (p (ROT*b3-F-1-WITNESS (R3-M-INVERSE (ROT-14))
                                                                                 P)))
                 )
           :in-theory nil
           )
          ("Subgoal 2"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance set-b20 (p p))
                 )
           :in-theory nil
           )
          ("Subgoal 1"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance set-b10 (p p))
                 )
           :in-theory nil
           )
          ))

(defthmd 1-14=>b3-0-n-b3-f
  (implies (or (b3-00 p)
               (b3-01 p)
               (b4-00 p)
               (b4-01 p)
               (b5-00 p)
               (b5-01 p)
               (b6-00 p)
               (b6-01 p)
               (b7-00 p)
               (b7-01 p)
               (b8-00 p)
               (b8-01 p)
               (b9-00 p)
               (b9-01 p)
               (b10-00 p)
               (b10-01 p)
               (b11-00 p)
               (b11-01 p)
               (b12-00 p)
               (b12-01 p)
               (b13-00 p)
               (b13-01 p)
               (b14-00 p)
               (b14-01 p)
               (set-b20 p)
               (set-b10 p))
           (b3-0-n-b3-f p))
  :hints (("goal"
           :use ((:instance b3-0-n-b3-f (p p))
                 (:instance b3-0-iff-a1-to-a14 (p p))
                 (:instance b3-00 (p p))
                 (:instance b3-01 (p p))
                 (:instance b4-00 (p p))
                 (:instance b4-01 (p p))
                 (:instance b5-00 (p p))
                 (:instance b5-01 (p p))
                 (:instance b6-00 (p p))
                 (:instance b6-01 (p p))
                 (:instance b7-00 (p p))
                 (:instance b7-01 (p p))
                 (:instance b8-00 (p p))
                 (:instance b8-01 (p p))
                 (:instance b9-00 (p p))
                 (:instance b9-01 (p p))
                 (:instance b10-00 (p p))
                 (:instance b10-01 (p p))
                 (:instance b11-00 (p p))
                 (:instance b11-01 (p p))
                 (:instance b12-00 (p p))
                 (:instance b12-01 (p p))
                 (:instance b13-00 (p p))
                 (:instance b13-01 (p p))
                 (:instance b14-00 (p p))
                 (:instance b14-01 (p p))
                 (:instance set-b20 (p p))
                 (:instance set-b10 (p p)))
           :in-theory nil
           )))

(defun set-b11 (p)
  (and (b3-0-set-a1 p)
       (set-f-p p)))

(defun set-b21 (p)
  (and (b3-0-set-a2 p)
       (set-f-p p)))

(defun-sk rota-1-b11-1 (point)
  (exists p
          (and (set-b11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b11 (p)
  (and (point-in-r3 p)
       (rota-1-b11-1 p)))

(defun-sk rota-1-b21-1 (point)
  (exists p
          (and (set-b21 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b21 (p)
  (and (point-in-r3 p)
       (rota-1-b21-1 p)))

(defun-sk rota-1-b3-10-1 (point)
  (exists p
          (and (b3-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b3-10 (p)
  (and (point-in-r3 p)
       (rota-1-b3-10-1 p)))

(defun-sk rota-1-b3-11-1 (point)
  (exists p
          (and (b3-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b3-11 (p)
  (and (point-in-r3 p)
       (rota-1-b3-11-1 p)))

(defun-sk rota-1-b4-10-1 (point)
  (exists p
          (and (b4-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b4-10 (p)
  (and (point-in-r3 p)
       (rota-1-b4-10-1 p)))

(defun-sk rota-1-b4-11-1 (point)
  (exists p
          (and (b4-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b4-11 (p)
  (and (point-in-r3 p)
       (rota-1-b4-11-1 p)))

(defun-sk rota-1-b5-10-1 (point)
  (exists p
          (and (b5-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b5-10 (p)
  (and (point-in-r3 p)
       (rota-1-b5-10-1 p)))

(defun-sk rota-1-b5-11-1 (point)
  (exists p
          (and (b5-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b5-11 (p)
  (and (point-in-r3 p)
       (rota-1-b5-11-1 p)))

(defun-sk rota-1-b6-10-1 (point)
  (exists p
          (and (b6-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b6-10 (p)
  (and (point-in-r3 p)
       (rota-1-b6-10-1 p)))

(defun-sk rota-1-b6-11-1 (point)
  (exists p
          (and (b6-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b6-11 (p)
  (and (point-in-r3 p)
       (rota-1-b6-11-1 p)))

(defun-sk rota-1-b7-10-1 (point)
  (exists p
          (and (b7-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b7-10 (p)
  (and (point-in-r3 p)
       (rota-1-b7-10-1 p)))

(defun-sk rota-1-b7-11-1 (point)
  (exists p
          (and (b7-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b7-11 (p)
  (and (point-in-r3 p)
       (rota-1-b7-11-1 p)))

(defun-sk rota-1-b8-10-1 (point)
  (exists p
          (and (b8-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b8-10 (p)
  (and (point-in-r3 p)
       (rota-1-b8-10-1 p)))

(defun-sk rota-1-b8-11-1 (point)
  (exists p
          (and (b8-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b8-11 (p)
  (and (point-in-r3 p)
       (rota-1-b8-11-1 p)))

(defun-sk rota-1-b9-10-1 (point)
  (exists p
          (and (b9-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b9-10 (p)
  (and (point-in-r3 p)
       (rota-1-b9-10-1 p)))

(defun-sk rota-1-b9-11-1 (point)
  (exists p
          (and (b9-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b9-11 (p)
  (and (point-in-r3 p)
       (rota-1-b9-11-1 p)))

(defun-sk rota-1-b10-10-1 (point)
  (exists p
          (and (b10-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b10-10 (p)
  (and (point-in-r3 p)
       (rota-1-b10-10-1 p)))

(defun-sk rota-1-b10-11-1 (point)
  (exists p
          (and (b10-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b10-11 (p)
  (and (point-in-r3 p)
       (rota-1-b10-11-1 p)))

(defun-sk rota-1-b11-10-1 (point)
  (exists p
          (and (b11-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b11-10 (p)
  (and (point-in-r3 p)
       (rota-1-b11-10-1 p)))

(defun-sk rota-1-b11-11-1 (point)
  (exists p
          (and (b11-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b11-11 (p)
  (and (point-in-r3 p)
       (rota-1-b11-11-1 p)))

(defun-sk rota-1-b12-10-1 (point)
  (exists p
          (and (b12-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b12-10 (p)
  (and (point-in-r3 p)
       (rota-1-b12-10-1 p)))

(defun-sk rota-1-b12-11-1 (point)
  (exists p
          (and (b12-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b12-11 (p)
  (and (point-in-r3 p)
       (rota-1-b12-11-1 p)))

(defun-sk rota-1-b13-10-1 (point)
  (exists p
          (and (b13-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b13-10 (p)
  (and (point-in-r3 p)
       (rota-1-b13-10-1 p)))

(defun-sk rota-1-b13-11-1 (point)
  (exists p
          (and (b13-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b13-11 (p)
  (and (point-in-r3 p)
       (rota-1-b13-11-1 p)))

(defun-sk rota-1-b14-10-1 (point)
  (exists p
          (and (b14-10 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b14-10 (p)
  (and (point-in-r3 p)
       (rota-1-b14-10-1 p)))

(defun-sk rota-1-b14-11-1 (point)
  (exists p
          (and (b14-11 p)
               (m-= (rotation-about-arbitrary-line (- (angle-const)) (m-p) (n-p) p) point))))

(defun rota-1-b14-11 (p)
  (and (point-in-r3 p)
       (rota-1-b14-11-1 p)))

(defthmd rota-inv-b3-0-n-f=>rota-inv-1-14
  (implies (rota-inv-b3-0-n-f p)
           (or (rota-1-b3-10 p)
               (rota-1-b3-11 p)
               (rota-1-b4-10 p)
               (rota-1-b4-11 p)
               (rota-1-b5-10 p)
               (rota-1-b5-11 p)
               (rota-1-b6-10 p)
               (rota-1-b6-11 p)
               (rota-1-b7-10 p)
               (rota-1-b7-11 p)
               (rota-1-b8-10 p)
               (rota-1-b8-11 p)
               (rota-1-b9-10 p)
               (rota-1-b9-11 p)
               (rota-1-b10-10 p)
               (rota-1-b10-11 p)
               (rota-1-b11-10 p)
               (rota-1-b11-11 p)
               (rota-1-b12-10 p)
               (rota-1-b12-11 p)
               (rota-1-b13-10 p)
               (rota-1-b13-11 p)
               (rota-1-b14-10 p)
               (rota-1-b14-11 p)
               (rota-1-b21 p)
               (rota-1-b11 p)
               ))
  :hints (("Goal"
           :cases ((b3-0-set-a3 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a4 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a5 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a6 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a7 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a8 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a9 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a10 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a11 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a12 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a13 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a14 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a2 (ROTA-INV-B3-0-N-F-1-WITNESS P))
                   (b3-0-set-a1 (ROTA-INV-B3-0-N-F-1-WITNESS P)))
           :use ((:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1 (point p))
                 (:instance b3-0-n-f (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3-0-iff-a1-to-a14 (p (ROTA-INV-B3-0-N-F-1-WITNESS P))))
           :in-theory nil
           )

          ("Subgoal 14"
           :use ((:instance rota-1-b3-10 (p p))
                 (:instance rota-1-b3-11 (p p))
                 (:instance rota-1-b3-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b3-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-3))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-3))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-3))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-3))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-3))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-3-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-3))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-3-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-3))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-3)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-3)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 13"
           :use ((:instance rota-1-b4-10 (p p))
                 (:instance rota-1-b4-11 (p p))
                 (:instance rota-1-b4-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b4-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b4-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b4-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-4))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-4))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-4))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-4))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-4))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-4-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-4))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-4-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-4))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot (m1 (a-inv-rotation (acl2-sqrt 2)))
                            (m2 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-4)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-4)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 12"
           :use ((:instance rota-1-b5-10 (p p))
                 (:instance rota-1-b5-11 (p p))
                 (:instance rota-1-b5-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b5-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b5-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b5-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-5))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-5))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-5))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-5))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-5))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-5-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-5))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-5-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-5))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot (m2 (a-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-5)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-5)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 11"
           :use ((:instance rota-1-b6-10 (p p))
                 (:instance rota-1-b6-11 (p p))
                 (:instance rota-1-b6-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b6-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b6-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b6-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-6))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-6))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-6))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-6))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-6))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-6-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-6))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-6-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-6))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance b3-0-r-1-a-inv-r-b3-0-a6-iff-b3-0-r-1-a-1-r-a6-1
                            (m2 (a-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D)))
                            (m3 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-6)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-6)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 10"
           :use ((:instance rota-1-b7-10 (p p))
                 (:instance rota-1-b7-11 (p p))
                 (:instance rota-1-b7-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b7-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b7-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b7-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-7))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-7))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-7))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-7))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-7))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-7-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-7))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-7-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-7))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-7)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-7)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 9"
           :use ((:instance rota-1-b8-10 (p p))
                 (:instance rota-1-b8-11 (p p))
                 (:instance rota-1-b8-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b8-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b8-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b8-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-8))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-8))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-8))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-8))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-8))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-8-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-8))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-8-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-8))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-8)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-8)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )

          ("Subgoal 8"
           :use ((:instance rota-1-b9-10 (p p))
                 (:instance rota-1-b9-11 (p p))
                 (:instance rota-1-b9-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b9-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b9-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b9-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-9))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-9))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-9))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-9))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-9))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-9-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-9))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-9-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-9))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-9)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-9)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 7"
           :use ((:instance rota-1-b10-10 (p p))
                 (:instance rota-1-b10-11 (p p))
                 (:instance rota-1-b10-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b10-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b10-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b10-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-10))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-10))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-10))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-10))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-10))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-10-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-10))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-10-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-10))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot (m1 (b-inv-rotation (acl2-sqrt 2)))
                            (m2 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-10)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-10)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 6"
           :use ((:instance rota-1-b11-10 (p p))
                 (:instance rota-1-b11-11 (p p))
                 (:instance rota-1-b11-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b11-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b11-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b11-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-11))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-11))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-11))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-11))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-11))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-11-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-11))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-11-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-11))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance rot*rot-is-rot (m2 (b-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-11)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-11)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 5"
           :use ((:instance rota-1-b12-10 (p p))
                 (:instance rota-1-b12-11 (p p))
                 (:instance rota-1-b12-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b12-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b12-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b12-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-12))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-12))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-12))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-12))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-12))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-12-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-12))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-12-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-12))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS
                                                     P))))
                 (:instance r3-rotationp-r-theta
                            (angle (- (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi))))))
                 (:instance r3-rotationp-r-theta
                            (angle (exists-in-interval-but-not-in-angle-sequence-witness 0 (* 2 (acl2-pi)))))
                 (:instance witness-not-in-angle-sequence)
                 (:instance b3-0-r-1-a-inv-r-b3-0-a6-iff-b3-0-r-1-a-1-r-a6-1
                            (m2 (b-inv-rotation (acl2-sqrt 2)))
                            (m1 (ROTATION-3D (- (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                                 0 (* 2 (ACL2-PI))))
                                             (POINT-ON-S2-NOT-D)))
                            (m3 (ROTATION-3D (EXISTS-IN-INTERVAL-BUT-NOT-IN-ANGLE-SEQUENCE-WITNESS
                                              0 (* 2 (ACL2-PI)))
                                             (POINT-ON-S2-NOT-D))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-12)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-12)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 4"
           :use ((:instance rota-1-b13-10 (p p))
                 (:instance rota-1-b13-11 (p p))
                 (:instance rota-1-b13-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b13-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b13-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b13-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-13))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-13))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-13))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-13))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-13))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-13-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-13))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-13-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-13))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-13)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-13)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 3"
           :use ((:instance rota-1-b14-10 (p p))
                 (:instance rota-1-b14-11 (p p))
                 (:instance rota-1-b14-10-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rota-1-b14-11-1-suff (point p) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b14-10 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b14-11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rotp-rot=>b3=>rot*b3-f-or-rot-sf
                            (p (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (rot (R3-M-INVERSE (ROT-14))))
                 (:instance rot*b3-f (rot (R3-M-INVERSE (ROT-14))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*b3-f-1 (rot (R3-M-INVERSE (ROT-14))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f (rot (R3-M-INVERSE (ROT-14))) (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance rot*set-f-1 (rot (R3-M-INVERSE (ROT-14))) (point (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance ROT-14-INV*B3-F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*B3-F-1-WITNESS (R3-M-INVERSE (ROT-14))
                                                   (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance ROT-14-INV*F-suff (point (ROTA-INV-B3-0-N-F-1-WITNESS P))
                            (p (ROT*SET-F-1-WITNESS (R3-M-INVERSE (ROT-14))
                                                    (ROTA-INV-B3-0-N-F-1-WITNESS P))))
                 (:instance base-rotations (x (acl2-sqrt 2)))
                 (:instance rot-14)
                 (:instance rot-m=>rot-m-inv
                            (m (rot-14)))
                 (:instance b3-0 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 (:instance b3 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )

          ("Subgoal 2"
           :use ((:instance rota-1-b21 (p p))
                 (:instance rota-1-b21-1-suff (p (ROTA-INV-B3-0-N-F-1-WITNESS P)) (point p))
                 (:instance set-b21 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ("Subgoal 1"
           :use ((:instance rota-1-b11 (p p))
                 (:instance rota-1-b11-1-suff (p (ROTA-INV-B3-0-N-F-1-WITNESS P)) (point p))
                 (:instance set-b11 (p (ROTA-INV-B3-0-N-F-1-WITNESS P)))
                 )
           :in-theory nil
           )
          ))

(defthmd rota-inv-1-14=>rota-inv-b3-0-n-f
  (implies (or (rota-1-b3-10 p)
               (rota-1-b3-11 p)
               (rota-1-b4-10 p)
               (rota-1-b4-11 p)
               (rota-1-b5-10 p)
               (rota-1-b5-11 p)
               (rota-1-b6-10 p)
               (rota-1-b6-11 p)
               (rota-1-b7-10 p)
               (rota-1-b7-11 p)
               (rota-1-b8-10 p)
               (rota-1-b8-11 p)
               (rota-1-b9-10 p)
               (rota-1-b9-11 p)
               (rota-1-b10-10 p)
               (rota-1-b10-11 p)
               (rota-1-b11-10 p)
               (rota-1-b11-11 p)
               (rota-1-b12-10 p)
               (rota-1-b12-11 p)
               (rota-1-b13-10 p)
               (rota-1-b13-11 p)
               (rota-1-b14-10 p)
               (rota-1-b14-11 p)
               (rota-1-b21 p)
               (rota-1-b11 p))
           (rota-inv-b3-0-n-f p))
  :hints (("Goal"
           :cases ((rota-1-b3-10 p)
                   (rota-1-b3-11 p)
                   (rota-1-b4-10 p)
                   (rota-1-b4-11 p)
                   (rota-1-b5-10 p)
                   (rota-1-b5-11 p)
                   (rota-1-b6-10 p)
                   (rota-1-b6-11 p)
                   (rota-1-b7-10 p)
                   (rota-1-b7-11 p)
                   (rota-1-b8-10 p)
                   (rota-1-b8-11 p)
                   (rota-1-b9-10 p)
                   (rota-1-b9-11 p)
                   (rota-1-b10-10 p)
                   (rota-1-b10-11 p)
                   (rota-1-b11-10 p)
                   (rota-1-b11-11 p)
                   (rota-1-b12-10 p)
                   (rota-1-b12-11 p)
                   (rota-1-b13-10 p)
                   (rota-1-b13-11 p)
                   (rota-1-b14-10 p)
                   (rota-1-b14-11 p)
                   (rota-1-b21 p)
                   (rota-1-b11 p))
           :in-theory nil
           )
          ("Subgoal 26"
           :use ((:instance rota-1-b3-10 (p p))
                 (:instance rota-1-b3-10-1 (point p))
                 (:instance b3-10 (p (rota-1-b3-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b3-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b3-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b3-10-1-witness p)))
                 ))
          ("Subgoal 25"
           :use ((:instance rota-1-b3-11 (p p))
                 (:instance rota-1-b3-11-1 (point p))
                 (:instance b3-11 (p (rota-1-b3-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b3-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b3-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b3-11-1-witness p)))
                 ))
          ("Subgoal 24"
           :use ((:instance rota-1-b4-10 (p p))
                 (:instance rota-1-b4-10-1 (point p))
                 (:instance b4-10 (p (rota-1-b4-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b4-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b4-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b4-10-1-witness p)))
                 )
           )
          ("Subgoal 23"
           :use ((:instance rota-1-b4-11 (p p))
                 (:instance rota-1-b4-11-1 (point p))
                 (:instance b4-11 (p (rota-1-b4-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b4-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b4-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b4-11-1-witness p)))
                 )
           )
          ("Subgoal 22"
           :use ((:instance rota-1-b5-10 (p p))
                 (:instance rota-1-b5-10-1 (point p))
                 (:instance b5-10 (p (rota-1-b5-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b5-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b5-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b5-10-1-witness p)))
                 )
           )
          ("Subgoal 21"
           :use ((:instance rota-1-b5-11 (p p))
                 (:instance rota-1-b5-11-1 (point p))
                 (:instance b5-11 (p (rota-1-b5-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b5-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b5-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b5-11-1-witness p)))
                 )
           )
          ("Subgoal 20"
           :use ((:instance rota-1-b6-10 (p p))
                 (:instance rota-1-b6-10-1 (point p))
                 (:instance b6-10 (p (rota-1-b6-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b6-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b6-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b6-10-1-witness p)))
                 )
           )
          ("Subgoal 19"
           :use ((:instance rota-1-b6-11 (p p))
                 (:instance rota-1-b6-11-1 (point p))
                 (:instance b6-11 (p (rota-1-b6-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b6-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b6-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b6-11-1-witness p)))
                 )
           )

          ("Subgoal 18"
           :use ((:instance rota-1-b7-10 (p p))
                 (:instance rota-1-b7-10-1 (point p))
                 (:instance b7-10 (p (rota-1-b7-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b7-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b7-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b7-10-1-witness p)))
                 )
           )
          ("Subgoal 17"
           :use ((:instance rota-1-b7-11 (p p))
                 (:instance rota-1-b7-11-1 (point p))
                 (:instance b7-11 (p (rota-1-b7-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b7-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b7-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b7-11-1-witness p)))
                 )
           )

          ("Subgoal 16"
           :use ((:instance rota-1-b8-10 (p p))
                 (:instance rota-1-b8-10-1 (point p))
                 (:instance b8-10 (p (rota-1-b8-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b8-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b8-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b8-10-1-witness p)))
                 )
           )
          ("Subgoal 15"
           :use ((:instance rota-1-b8-11 (p p))
                 (:instance rota-1-b8-11-1 (point p))
                 (:instance b8-11 (p (rota-1-b8-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b8-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b8-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b8-11-1-witness p)))
                 )
           )
          ("Subgoal 14"
           :use ((:instance rota-1-b9-10 (p p))
                 (:instance rota-1-b9-10-1 (point p))
                 (:instance b9-10 (p (rota-1-b9-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b9-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b9-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b9-10-1-witness p)))
                 )
           )
          ("Subgoal 13"
           :use ((:instance rota-1-b9-11 (p p))
                 (:instance rota-1-b9-11-1 (point p))
                 (:instance b9-11 (p (rota-1-b9-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b9-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b9-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b9-11-1-witness p)))
                 )
           )
          ("Subgoal 12"
           :use ((:instance rota-1-b10-10 (p p))
                 (:instance rota-1-b10-10-1 (point p))
                 (:instance b10-10 (p (rota-1-b10-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b10-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b10-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b10-10-1-witness p)))
                 )
           )
          ("Subgoal 11"
           :use ((:instance rota-1-b10-11 (p p))
                 (:instance rota-1-b10-11-1 (point p))
                 (:instance b10-11 (p (rota-1-b10-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b10-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b10-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b10-11-1-witness p)))
                 )
           )
          ("Subgoal 10"
           :use ((:instance rota-1-b11-10 (p p))
                 (:instance rota-1-b11-10-1 (point p))
                 (:instance b11-10 (p (rota-1-b11-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b11-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b11-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b11-10-1-witness p)))
                 )
           )
          ("Subgoal 9"
           :use ((:instance rota-1-b11-11 (p p))
                 (:instance rota-1-b11-11-1 (point p))
                 (:instance b11-11 (p (rota-1-b11-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b11-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b11-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b11-11-1-witness p)))
                 )
           )
          ("Subgoal 8"
           :use ((:instance rota-1-b12-10 (p p))
                 (:instance rota-1-b12-10-1 (point p))
                 (:instance b12-10 (p (rota-1-b12-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b12-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b12-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b12-10-1-witness p)))
                 )
           )
          ("Subgoal 7"
           :use ((:instance rota-1-b12-11 (p p))
                 (:instance rota-1-b12-11-1 (point p))
                 (:instance b12-11 (p (rota-1-b12-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b12-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b12-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b12-11-1-witness p)))
                 )
           )
          ("Subgoal 6"
           :use ((:instance rota-1-b13-10 (p p))
                 (:instance rota-1-b13-10-1 (point p))
                 (:instance b13-10 (p (rota-1-b13-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b13-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b13-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b13-10-1-witness p)))
                 )
           )
          ("Subgoal 5"
           :use ((:instance rota-1-b13-11 (p p))
                 (:instance rota-1-b13-11-1 (point p))
                 (:instance b13-11 (p (rota-1-b13-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b13-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b13-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b13-11-1-witness p)))
                 )
           )
          ("Subgoal 4"
           :use ((:instance rota-1-b14-10 (p p))
                 (:instance rota-1-b14-10-1 (point p))
                 (:instance b14-10 (p (rota-1-b14-10-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b14-10-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b14-10-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b14-10-1-witness p)))
                 )
           )
          ("Subgoal 3"
           :use ((:instance rota-1-b14-11 (p p))
                 (:instance rota-1-b14-11-1 (point p))
                 (:instance b14-11 (p (rota-1-b14-11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b14-11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b14-11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b14-11-1-witness p)))
                 )
           )
          ("Subgoal 2"
           :use ((:instance rota-1-b21 (p p))
                 (:instance rota-1-b21-1 (point p))
                 (:instance set-b21 (p (rota-1-b21-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b21-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b21-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b21-1-witness p)))
                 )
           )
          ("Subgoal 1"
           :use ((:instance rota-1-b11 (p p))
                 (:instance rota-1-b11-1 (point p))
                 (:instance set-b11 (p (rota-1-b11-1-witness p)))
                 (:instance b3-0-iff-a1-to-a14 (p (rota-1-b11-1-witness p)))
                 (:instance rota-inv-b3-0-n-f (p p))
                 (:instance rota-inv-b3-0-n-f-1-suff (point p) (p (rota-1-b11-1-witness p)))
                 (:instance b3-0-n-f (p (rota-1-b11-1-witness p)))
                 )
           )))

(defthmd b3-equiv-1
  (iff (b3 p)
       (or (b3-00 p)
           (b3-01 p)
           (b4-00 p)
           (b4-01 p)
           (b5-00 p)
           (b5-01 p)
           (b6-00 p)
           (b6-01 p)
           (b7-00 p)
           (b7-01 p)
           (b8-00 p)
           (b8-01 p)
           (b9-00 p)
           (b9-01 p)
           (b10-00 p)
           (b10-01 p)
           (b11-00 p)
           (b11-01 p)
           (b12-00 p)
           (b12-01 p)
           (b13-00 p)
           (b13-01 p)
           (b14-00 p)
           (b14-01 p)
           (set-b20 p)
           (set-b10 p)
           (rota-1-b3-10 p)
           (rota-1-b3-11 p)
           (rota-1-b4-10 p)
           (rota-1-b4-11 p)
           (rota-1-b5-10 p)
           (rota-1-b5-11 p)
           (rota-1-b6-10 p)
           (rota-1-b6-11 p)
           (rota-1-b7-10 p)
           (rota-1-b7-11 p)
           (rota-1-b8-10 p)
           (rota-1-b8-11 p)
           (rota-1-b9-10 p)
           (rota-1-b9-11 p)
           (rota-1-b10-10 p)
           (rota-1-b10-11 p)
           (rota-1-b11-10 p)
           (rota-1-b11-11 p)
           (rota-1-b12-10 p)
           (rota-1-b12-11 p)
           (rota-1-b13-10 p)
           (rota-1-b13-11 p)
           (rota-1-b14-10 p)
           (rota-1-b14-11 p)
           (rota-1-b21 p)
           (rota-1-b11 p)))
  :hints (("Goal"
           :use ((:instance b3-iff-b3-0-n-b3-f-or-rota-inv-b3-0-n-f (p p))
                 (:instance b3-0-n-b3-f=>1-14 (p p))
                 (:instance 1-14=>b3-0-n-b3-f (p p))
                 (:instance rota-inv-b3-0-n-f=>rota-inv-1-14 (p p))
                 (:instance rota-inv-1-14=>rota-inv-b3-0-n-f (p p))
                 )
           :in-theory nil
           )))
